id: report
type: PageHeaderMenu
properties:
  title: Report
layout:
  contentGutter: 16 # Set a gutter of 16px between all the cards on the page
requests:
  # Request for the bar and pie charts
  - id: scores_by_genre
    type: MongoDBAggregation # MongoDB Aggregation to get the data
    connectionId: movies_mongodb
    properties:
      pipeline:
        - $unwind:
            path: $genres # Genres is an array, so unwind to create 1 document for every array entry
        - $match: # Only look at top 6 genres
            genres:
              $in:
                - Drama
                - Comedy
                - Romance
                - Crime
                - Thriller
                - Action
        - $group:
            # Calculate the average Rotten Tomatoes viewer and critic ratings for each genre.
            _id: $genres # Group data by the genre field
            viewerRating:
              $avg: $tomatoes.viewer.rating
            criticRating:
              $avg: $tomatoes.critic.rating
            count:
              $sum: 1 # Count the number of documents by summing 1 for every document
        - $addFields:
            # Multiply viewerRating by 2 as it is out of 5 not 10.
            viewerRating:
              $multiply:
                - $viewerRating
                - 2
        - $sort:
            count: -1 # Sort by descending count

  # Request for the table
  - id: top_100_score_difference_movies
    type: MongoDBAggregation # MongoDB Aggregation to get the data
    connectionId: movies_mongodb
    properties:
      pipeline:
        - $match:
            tomatoes.critic.numReviews: # Match where there are 20 or more critic reviews
              $gte: 20
            tomatoes.viewer.numReviews: # and 100 or more viewer reviews
              $gte: 100
            genres: # Only look at top 6 genres
              $in:
                - Drama
                - Comedy
                - Romance
                - Crime
                - Thriller
                - Action
        - $project: # Include fields we want to show in the table
            title: 1
            year: 1
            rated: 1
            viewerRating: # Multiply viewerRating by 2 as it is out of 5 not 10.
              $multiply:
                - $tomatoes.viewer.rating
                - 2
            criticRating: $tomatoes.critic.rating
            viewerReviews: $tomatoes.viewer.numReviews
            criticReviews: $tomatoes.critic.numReviews
            difference: # Calculate the difference between the critic and viewer scores
              $abs: # Take the absolute (positive) value
                $subtract:
                  - $multiply:
                      - $tomatoes.viewer.rating
                      - 2
                  - $tomatoes.critic.rating

        - $sort:
            difference: -1 # Sort by biggest difference
        - $limit: 100 # Only return the first 100 results
events:
  # A list of actions that gets completed when this page is first loaded.
  onInitAsync:
    - id: fetch_data # Fetch the request data before the page renders in order to populate the charts
      type: Request
      params:
        - scores_by_genre
        - top_100_score_difference_movies

areas:
  content:
    blocks:
      - id: title # Title on page
        type: Title
        properties:
          content: Movie Critic and Viewer Ratings
          level: 4
      - id: genre_counts_bar_chart_card
        type: Card
        properties:
          title: Comparison of Critic and Viewer Ratings by Genre
        layout:
          span: 16 # Make the card span 2 thirds of the screen
        blocks:
          - id: genre_counts_bar_chart
            type: EChart
            properties:
              height: 400
              option:
                dataset:
                  source:
                    _request: scores_by_genre # Use scores_by_genre request for chart data
                legend:
                  show: true
                  bottom: 0 # Display legend below chart
                grid:
                  bottom: 100
                tooltip:
                  show: true
                  trigger: item
                xAxis:
                  type: category # Add a category for the x axis
                  data:
                    _array.map: # Map over the data and get the list of _ids which will serve as our categories
                      - _request: scores_by_genre
                      - _function:
                          __args: 0._id
                  axisLabel:
                    rotate: 60 # Rotate the labels
                yAxis:
                  - type: value # Add a value for the y axis
                    name: Rating # Give the y axis a title
                    nameRotate: 90 ÃŸ
                    nameLocation: middle
                    nameGap: 40
                    min: # Set minimum y value
                      _function:
                        __math.floor:
                          __if_none:
                            - __args: 0.min
                            - 0
                series:
                  - type: bar # Create a column series to show columns
                    name: Critics Rating
                    itemStyle:
                      color: '#5D7092' # Set column fill color
                      borderColor: '#5D7092' # Set column border color
                    encode:
                      x: _id # Set the category value to the field _id in the data
                      y: criticRating # Set the value value to the field in the data
                  - type: bar
                    name: Viewer Rating
                    itemStyle:
                      color: '#5AD8A6'
                      borderColor: '#5AD8A6'
                    encode:
                      x: _id
                      y: viewerRating

      - id: pie_chart_card
        type: Card
        layout:
          span: 8
        properties:
          title: Genre Counts
        blocks:
          - id: pie_chart
            type: EChart
            properties:
              height: 400
              option:
                series:
                  - name: genre_counts
                    type: pie
                    radius: [30%, 50%] # Make the chart a donut chart
                    label:
                      fontSize: 12
                    data:
                      _mql.aggregate: # Format data to have fields name and value
                        on:
                          _request: scores_by_genre # Share the same request as the bar chart
                        pipeline:
                          - $project:
                              name: $_id
                              value: $count
                          - $sort:
                              value: -1
                    color: # Add custom colors
                      - '#122C6A'
                      - '#0044A4'
                      - '#005BBF'
                      - '#3874DB'
                      - '#5A8DF8'
                      - '#7EABFF'

      - id: table_card
        type: Card
        properties:
          title: 100 Movies with Largest Difference between Critic and Viewer Ratings
        blocks:
          - id: table
            type: AgGridAlpine
            properties:
              theme: basic
              rowData:
                _request: top_100_score_difference_movies
              defaultColDef: # Define default column definitions that apply to all the defined columns
                sortable: true # Enables sorting on the columns when the header is clicked
                resizable: true # Enables resizing of column widths
                filter: true # Enables filtering of the columns using agGrid's default filter
              columnDefs: # Define all the columns
                - headerName: Title # Display name
                  field: title # The field name in the data
                  minWidth: 350
                  flex: 1 0 auto
                - headerName: Year
                  field: year
                  width: 100
                - headerName: Difference
                  field: difference
                  width: 160
                  type: numericColumn # Setting this aligns the number on the right
                  valueFormatter:
                    _function: # Provide a fprmatter function to pretty render the data value.
                      __intl.numberFormat:
                        on:
                          __args: 0.value
                        params:
                          options:
                            minimumFractionDigits: 1 # Format the number with 1 decimal place
                - headerName: Viewer Rating
                  field: viewerRating
                  width: 160
                  type: numericColumn
                  valueFormatter:
                    _function:
                      __intl.numberFormat:
                        on:
                          __args: 0.value
                        params:
                          options:
                            maximumFractionDigits: 1
                - headerName: Critic Rating
                  field: criticRating
                  width: 160
                  type: numericColumn
                  valueFormatter:
                    _function:
                      __intl.numberFormat:
                        on:
                          __args: 0.value
                        params:
                          options:
                            maximumFractionDigits: 1
                - headerName: Viewer Reviews
                  field: viewerReviews
                  width: 160
                  type: numericColumn
                  valueFormatter:
                    _function:
                      __intl.numberFormat:
                        on:
                          __args: 0.value
                        params:
                          options:
                            maximumFractionDigits: 0
                - headerName: Critic Reviews
                  field: criticReviews
                  width: 160
                  type: numericColumn
                  valueFormatter:
                    _function:
                      __intl.numberFormat:
                        on:
                          __args: 0.value
                        params:
                          options:
                            maximumFractionDigits: 0
  header:
    blocks:
      - id: affix
        type: Affix
        blocks:
          - id: source_button
            type: Button
            properties:
              icon: AiOutlineGithub
              title: View App Source Code
              type: default
              shape: round
            events:
              onClick:
                - id: link_repo
                  type: Link
                  params:
                    url: https://github.com/lowdefy/lowdefy-example-reporting
                    newTab: true
